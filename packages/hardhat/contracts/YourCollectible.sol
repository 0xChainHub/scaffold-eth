pragma solidity >=0.6.0 <0.9.0;
//SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import 'base64-sol/base64.sol';

import './HexStrings.sol';
import './ToColor.sol';
//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721

// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two

contract YourCollectible is ERC721, Ownable {

  using Strings for uint256;
  using HexStrings for uint160;
  using ToColor for bytes3;
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  constructor() public ERC721("Loogies", "LOOG") {
    // RELEASE THE LOOGIES!
  }

//   mapping (uint256 => bytes3) public color;
//   mapping (uint256 => uint256) public chubbiness;

//   uint256 mintDeadline = block.timestamp + 24 hours;

  function mintItem()
      public
      onlyOwner
      returns (uint256)
  {
    //   require( block.timestamp < mintDeadline, "DONE MINTING");
      _tokenIds.increment();

      uint256 id = _tokenIds.current();
      _mint(msg.sender, id);

    //   bytes32 predictableRandom = keccak256(abi.encodePacked( blockhash(block.number-1), msg.sender, address(this) ));
    //   color[id] = bytes2(predictableRandom[0]) | ( bytes2(predictableRandom[1]) >> 8 ) | ( bytes3(predictableRandom[2]) >> 16 );
    //   chubbiness[id] = 35+((55*uint256(uint8(predictableRandom[3])))/255);

      return id;
  }

  function renderDonut() public pure returns (string memory) {
      return generateSVGofTokenById();
  }

  function tokenURI(uint256 id) public view override returns (string memory) {
      require(_exists(id), "not exist");
      return generateSVGofTokenById();
    //   string memory name = string(abi.encodePacked('Donut #',id.toString()));
    //   string memory description = "Hot donuts!";
    //   string memory image = Base64.encode(bytes(generateSVGofTokenById()));

    //   return
    //       string(
    //           abi.encodePacked(
    //             'data:application/json;base64,',
    //             Base64.encode(
    //                 bytes(
    //                       abi.encodePacked(
    //                           '{"name":"',
    //                           name,
    //                           '", "description":"',
    //                           description,
    //                           '", "external_url":"https://burnyboys.com/token/',
    //                           id.toString(),
    //                           '", "attributes": [{"trait_type": "color", "value": "#',
    //                           "foo",
    //                           '"},{"trait_type": "chubbiness", "value": ',
    //                           uint2str(id),
    //                           '}], "owner":"',
    //                           (uint160(ownerOf(id))).toHexString(20),
    //                           '", "image": "',
    //                           'data:image/svg+xml;base64,',
    //                           image,
    //                           '"}'
    //                       )
    //                     )
    //                 )
    //           )
    //       );
  }

  function generateSVGofTokenById() internal pure returns (string memory) {
      return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 59.084 59.084"><path d="M16.974 26.493l-4.317 1.168a1 1 0 10.523 1.93l4.317-1.168a1 1 0 00.704-1.226.995.995 0 00-1.227-.704zM29.06 35.165l-3-1a1 1 0 10-.633 1.897l3 1a1.001 1.001 0 00.633-1.897zM48.077 23.943a1 1 0 00-1 1v4a1 1 0 102 0v-4a1 1 0 00-1-1zM23.74 13.22a.996.996 0 001.412.076 1 1 0 00.075-1.412l-2.114-2.353a1 1 0 10-1.487 1.336l2.114 2.353zM46.994 18.49l3 1a1.001 1.001 0 00.633-1.897l-3-1a.997.997 0 00-1.265.632.998.998 0 00.632 1.265zM36.512 30.891a.988.988 0 00-1.058.938l-.084 1.411a1 1 0 00.938 1.058l.061.002a.999.999 0 00.997-.94l.084-1.411a.999.999 0 00-.938-1.058zM43.537 36.321a.997.997 0 001.414 0 .999.999 0 000-1.414l-1-1a.999.999 0 10-1.414 1.414l1 1zM15.784 34.406a.999.999 0 10-1.414 1.414l1 1a.997.997 0 001.414 0 .999.999 0 000-1.414l-1-1zM44.273 14.582l.045-.001a1 1 0 00.955-1.043l-.062-1.413a1 1 0 10-1.998.088l.062 1.413a1 1 0 00.998.956zM13.39 19.797a1 1 0 00.972-1.242l-1-4a1.001 1.001 0 00-1.941.484l1 4a1 1 0 00.969.758zM8.284 22.635a.999.999 0 10-1.414 1.414l1 1a.997.997 0 001.414 0 .999.999 0 000-1.414l-1-1zM36.703 14.082a.997.997 0 001.414 0 .999.999 0 000-1.414l-1-1a.999.999 0 10-1.414 1.414l1 1z"/><path d="M59.079 27.424l-.002-2.383a.883.883 0 00-.081-.368c-.003-.122-.016-.242-.022-.364a15.07 15.07 0 00-.031-.522c-.015-.18-.036-.359-.058-.538-.021-.174-.041-.348-.068-.52-.027-.176-.061-.35-.094-.525a14.89 14.89 0 00-.105-.519c-.039-.171-.084-.34-.128-.51-.045-.173-.09-.345-.141-.516-.05-.167-.106-.332-.162-.497-.057-.171-.114-.342-.177-.511a16.747 16.747 0 00-.193-.483c-.069-.169-.138-.338-.213-.505-.071-.158-.148-.313-.224-.47-.081-.167-.161-.333-.248-.498-.081-.153-.167-.304-.252-.455-.093-.164-.184-.329-.283-.491-.09-.149-.186-.295-.281-.442-.104-.161-.206-.321-.315-.48-.1-.145-.206-.287-.31-.43-.114-.156-.227-.313-.347-.468-.108-.14-.222-.276-.335-.414-.125-.154-.25-.307-.38-.458-.116-.133-.237-.264-.357-.396-.137-.151-.273-.302-.415-.449-.124-.129-.253-.254-.381-.381-.146-.145-.291-.291-.442-.433-.133-.125-.272-.247-.409-.37-.155-.139-.308-.279-.468-.416-.141-.12-.288-.237-.433-.355-.164-.134-.326-.269-.495-.4-.149-.115-.303-.227-.455-.34-.173-.128-.344-.257-.521-.382-.157-.111-.319-.218-.48-.326-.18-.122-.359-.245-.543-.363-.163-.105-.332-.205-.499-.308-.189-.116-.377-.234-.57-.346-.171-.1-.347-.195-.522-.292-.195-.109-.389-.219-.588-.325-.181-.096-.367-.186-.551-.279-.2-.101-.398-.203-.602-.301-.188-.09-.381-.175-.573-.262-.206-.094-.41-.189-.619-.279-.198-.085-.4-.164-.601-.246-.209-.085-.416-.173-.629-.255-.206-.079-.416-.152-.624-.228-.214-.078-.426-.158-.642-.232-.216-.073-.436-.141-.654-.211-.215-.069-.427-.14-.644-.205-.224-.067-.453-.128-.68-.191-.218-.061-.434-.125-.655-.182-.232-.06-.468-.113-.703-.17-.22-.053-.437-.108-.659-.157-.246-.054-.496-.101-.744-.151-.216-.043-.43-.09-.648-.13-.257-.047-.519-.086-.778-.128-.214-.035-.425-.073-.64-.104-.269-.039-.543-.07-.815-.104-.21-.026-.418-.056-.629-.079-.294-.032-.593-.055-.89-.081-.192-.017-.383-.038-.576-.052-.346-.025-.696-.041-1.046-.057-.148-.007-.294-.018-.442-.024-.5-.018-1.003-.027-1.509-.027-16.266 0-29.5 9.421-29.5 21 0 .833.077 6.5.077 6.5 0 .037.009.072.011.108l.005 2.829c0 11.53 12.917 20.563 29.408 20.563 16.313 0 29.584-9.406 29.584-20.969l-.005-5.949c.003-.24.004-.47.001-.698zM57 25.042c0 .184.012.459.028.803.018.401.044.966.051 1.613v.591c-.018 1.924-.243 4.307-1.253 5.407-.348.379-.758.565-1.289.587a.529.529 0 01-.298-.122.527.527 0 01-.163-.379 1 1 0 10-2 0v3c0 .271-.229.5-.5.5s-.5-.229-.5-.5a1 1 0 10-2 0v4c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-1a1 1 0 10-2 0c0 .271-.229.5-.5.5s-.5-.229-.5-.5a1 1 0 10-2 0v5c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-3.5a1 1 0 10-2 0 1.001 1.001 0 01-2 0 1 1 0 10-2 0v3.5c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-1.5a1 1 0 10-2 0 1.001 1.001 0 01-2 0 1 1 0 10-2 0v4a1.001 1.001 0 01-2 0v-3.5a1 1 0 10-2 0c0 .271-.229.5-.5.5s-.5-.229-.5-.5a1 1 0 10-2 0v1.5a1.001 1.001 0 01-2 0v-3.5a1 1 0 10-2 0c0 .271-.229.5-.5.5s-.5-.229-.5-.5a1 1 0 10-2 0v2c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-5a1 1 0 10-2 0c0 .271-.229.5-.5.5s-.5-.229-.5-.5a1 1 0 10-2 0v2c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-4a1 1 0 10-2 0c0 .271-.229.5-.5.5s-.5-.229-.5-.5v-4.821c0-.25-.11-.509-.279-.693a1 1 0 00-1.731.568.502.502 0 01-.49.447.502.502 0 01-.489-.459l-.011-6.541c0-10.477 12.302-19 27.423-19C44.664 6.042 57 14.566 57 25.042zm-27.5 28c-15.369 0-27.408-8.153-27.408-18.563l-.001-.487a2.5 2.5 0 00.985-.002v2.551a2.503 2.503 0 003 2.45v1.55c0 1.379 1.122 2.5 2.5 2.5 1.228 0 2.252-.89 2.461-2.059.335.073.703.075 1.039.009v2.55c0 1.379 1.122 2.5 2.5 2.5 1.228 0 2.252-.89 2.461-2.059.334.073.703.076 1.039.009v1.05c0 1.654 1.346 3 3 3a3.005 3.005 0 002.857-2.084c.363.098.772.108 1.143.034v1.05c0 1.654 1.346 3 3 3s3-1.346 3-3V45.87a3.101 3.101 0 002.307-.129 2.504 2.504 0 002.193 1.3c1.378 0 2.5-1.121 2.5-2.5v-.671a3.1 3.1 0 002 0v.671c0 1.379 1.122 2.5 2.5 2.5s2.5-1.121 2.5-2.5v-2.55c.456.091.961.05 1.388-.113a2.503 2.503 0 002.112 1.163c1.378 0 2.5-1.121 2.5-2.5v-1.55a2.503 2.503 0 003-2.45V36c.175.034.354.043.54.04a3.7 3.7 0 002.433-1.007c-.73 10.016-12.808 18.009-27.549 18.009z"/><path d="M19.077 24.042c0 .696.173 1.396.506 2.084.011.028.009.058.023.085 1.442 2.89 5.65 4.831 10.472 4.831 4.822 0 9.03-1.941 10.472-4.831.013-.027.012-.057.023-.085.333-.688.505-1.388.505-2.084 0-3.925-4.832-7-11-7s-11.001 3.075-11.001 7zm2.941 2.182l.073-.025a20.21 20.21 0 011.644-.524c.08-.022.158-.047.238-.068a21.982 21.982 0 012.071-.436 24.151 24.151 0 011.792-.227c.099-.009.2-.014.299-.022.64-.049 1.287-.08 1.943-.08.655 0 1.302.032 1.943.08.1.008.2.013.299.022a24.151 24.151 0 013.862.663c.081.021.159.046.239.068.562.155 1.112.328 1.643.524l.073.025c-1.512 1.696-4.622 2.818-8.059 2.818-3.439 0-6.549-1.121-8.06-2.818zm8.059-7.182c4.878 0 9 2.29 9 5 0 .129-.01.257-.031.387l-.025-.008a22.234 22.234 0 00-1.895-.624c-.096-.027-.191-.056-.287-.082a24.161 24.161 0 00-2.276-.494 26.303 26.303 0 00-2.014-.264c-.096-.009-.193-.013-.29-.021a27.553 27.553 0 00-2.181-.093c-.735 0-1.461.036-2.18.093-.097.008-.194.012-.29.021a26.277 26.277 0 00-4.289.759c-.098.026-.194.056-.291.083-.647.183-1.28.387-1.891.622l-.027.009a2.413 2.413 0 01-.031-.387c-.002-2.711 4.119-5.001 8.998-5.001z"/></svg>';
  }

  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
      if (_i == 0) {
          return "0";
      }
      uint j = _i;
      uint len;
      while (j != 0) {
          len++;
          j /= 10;
      }
      bytes memory bstr = new bytes(len);
      uint k = len;
      while (_i != 0) {
          k = k-1;
          uint8 temp = (48 + uint8(_i - _i / 10 * 10));
          bytes1 b1 = bytes1(temp);
          bstr[k] = b1;
          _i /= 10;
      }
      return string(bstr);
  }
}